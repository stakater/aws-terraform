<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="81">
  <server artifactsdir="artifacts" agentAutoRegisterKey="123456789ytrewq" commandRepositoryLocation="default" serverId="e89d0b81-9c38-4e25-a946-ac1dc6944233" />
  <pipelines group="Stakater-Pipelines">
    <pipeline name="Stakater-Pipeline">
      <params>
        <param name="SOURCE_DIR" />
        <param name="BUILD_DOCKER_IMAGE"></param>
        <param name="BUILD_DOCKER_IMAGE_NAME"></param>
        <param name="BUILD_DOCKER_IMAGE_OPTS"></param>
        <param name="BUILT_WAR_FILE"></param>
        <param name="APP_COMPILE_CMD"></param>
        <param name="APP_TEST_CMD"></param>
        <param name="APP_PACKAGE_CMD"></param>
        <param name="APP_TEST_ARTIFACT"></param>
        <param name="APP_IMAGE_BUILD_DIR"></param>
        <param name="APP_IMAGE_BUILD_VERSION_CMD"></param>
        <param name="STAKATER_COMMAND">make init_build_dir</param>
        <param name="STAKATER_CLUSTER_NAME">gocd-cluster</param>
        <param name="AWS_REGION">sa-east-1</param>
        <param name="AWS_ACCESS_KEY_ID"></param>
        <param name="AWS_SECRET_KEY"></param>
      </params>
      <environmentvariables>
        <variable name="APP_DOCKER_IMAGE">
          <value></value>
        </variable>
        <variable name="APP_DOCKER_OPTS">
          <value></value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="" branch="master" />
      </materials>
      <stage name="Compile">
        <jobs>
          <job name="Compile">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker run -d --name #{BUILD_DOCKER_IMAGE_NAME} #{BUILD_DOCKER_IMAGE_OPTS} #{BUILD_DOCKER_IMAGE}</arg>
                <runif status="any" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker cp ./ #{BUILD_DOCKER_IMAGE_NAME}:/app</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker exec #{BUILD_DOCKER_IMAGE_NAME} /bin/bash -c "#{APP_COMPILE_CMD}"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Test" fetchMaterials="false">
        <jobs>
          <job name="Unit_Test">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker exec #{BUILD_DOCKER_IMAGE_NAME} /bin/bash -c "#{APP_TEST_CMD}"</arg>
                <runif status="any" />
              </exec>
            </tasks>
            <artifacts>
              <test src="#{APP_TEST_ARTIFACT}" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="Package" fetchMaterials="false">
        <jobs>
          <job name="Package">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker exec #{BUILD_DOCKER_IMAGE_NAME} /bin/bash -c "#{APP_PACKAGE_CMD}"</arg>
                <runif status="any" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker cp #{BUILD_DOCKER_IMAGE_NAME}:#{BUILT_WAR_FILE} #{APP_IMAGE_BUILD_DIR}/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker stop #{BUILD_DOCKER_IMAGE_NAME}</arg>
                <runif status="any" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker rm -v #{BUILD_DOCKER_IMAGE_NAME}</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Publish-Docker-Image" fetchMaterials="false">
        <jobs>
          <job name="Publish">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker build -t ${APP_DOCKER_IMAGE} #{APP_IMAGE_BUILD_DIR}</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker push ${APP_DOCKER_IMAGE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>newTag=${APP_DOCKER_IMAGE}:$(bash -c "#{APP_IMAGE_BUILD_VERSION_CMD}").$GO_PIPELINE_COUNTER;\
                     sudo docker tag -f ${APP_DOCKER_IMAGE} ${newTag}</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>newTag=${APP_DOCKER_IMAGE}:$(bash -c "#{APP_IMAGE_BUILD_VERSION_CMD}").$GO_PIPELINE_COUNTER;\
                     sudo docker push ${newTag}</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Make-AMI" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="Run">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>echo $HOME;if [ ! -d $HOME/.aws ]; then mkdir ~/.aws;
                       echo -e "[profile coreos-cluster] \nregion = #{AWS_REGION} \n[default] \nregion = #{AWS_REGION}" &gt; $HOME/.aws/config;
                       echo -e "[coreos-cluster] \naws_access_key_id = #{AWS_ACCESS_KEY_ID}\naws_secret_access_key = #{AWS_SECRET_KEY}\n[default]\naws_access_key_id = #{AWS_ACCESS_KEY_ID}\naws_secret_access_key = #{AWS_SECRET_KEY}" &gt; $HOME/.aws/credentials; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>appDir=(/app/*); \
                    if [ ${##appDir[@]} == 0 ]; then sudo git clone https://github.com/stakater/stakater.git /app; fi</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>cd /app; sudo git pull origin master; sudo git fetch;sudo git checkout gocd-units;sudo git checkout -f; sudo git pull origin gocd-units;</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker run -d --name terraform -v /app:/usr/src/app stakater/terraform</arg>
                <runif status="any" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker cp $HOME/.aws terraform:/root/.aws</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo /app/scripts/substitute-makefile-vars.sh -m /app/Makefile -c ${STAKATER_CLUSTER_NAME};</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker exec terraform /bin/bash -c "export APP_DOCKER_IMAGE=${APP_DOCKER_IMAGE};export APP_DOCKER_OPTS=\"${APP_DOCKER_OPTS}\";#{STAKATER_COMMAND}"</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>sudo docker rm -vf terraform</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <agents>
  </agents>
</cruise>

